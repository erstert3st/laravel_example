//------------------apache----------------------  https://grafana.com/docs/grafana-cloud/monitor-infrastructure/integrations/integration-reference/integration-apache-http

discovery.relabel "integrations_apache_http_histogram" {
    targets = prometheus.exporter.self.alloy.targets

	rule {
		replacement  = "integrations/apache_http"
		target_label = "job"
	}

	rule {
		source_labels = ["exported_instance"]
		target_label  = "instance" // may change that ^≈ù
	}
}

prometheus.scrape "integrations_apache_http_histogram" {
	targets    = discovery.relabel.integrations_apache_http_histogram.output
	forward_to = [prometheus.remote_write.mimir.receiver]
}

prometheus.exporter.apache "integrations_apache_http" {
	scrape_uri = "http://apache:80/server-status?auto"
}

discovery.relabel "integrations_apache_http" {
    targets = prometheus.exporter.apache.integrations_apache_http.targets

	rule {
		target_label = "instance"
		replacement  = constants.hostname
	}

	rule {
		target_label = "job"
		replacement  = "integrations/apache_http"
	}
}

prometheus.scrape "integrations_apache_http" {
	targets    = discovery.relabel.integrations_apache_http.output
	forward_to = [prometheus.remote_write.mimir.receiver]
	job_name   = "integrations/apache_http"
}

//------------------apache logs---------------------------------------------------------------------
local.file_match "logs_integrations_integrations_apache_error" {
	path_targets = [{
		__address__ = "localhost",
		__path__    = "/var/log/apache2/error.log",
		instance    = constants.hostname,
		job         = "integrations/apache_http",
	}]
}

loki.process "logs_integrations_integrations_apache_error" {
	forward_to = []

	stage.regex {
		expression = "^\\[[^ ]* (?P<timestamp>[^\\]]*)\\] \\[(?:(?P<module>[^:\\]]+):)?(?P<level>[^\\]]+)\\](?: \\[pid (?P<pid>[^\\]]*)\\])?(?: \\[client (?P<client>[^\\]]*)\\])? (?P<message>.*)$"
	}

	stage.labels {
		values = {
			level  = null,
			module = null,
		}
	}

	stage.static_labels {
		values = {
			job          = "apache_error",
			service_name = "apache",
			logtype      = "error",
		}
	}
}

loki.source.file "logs_integrations_integrations_apache_error" {
	targets    = local.file_match.logs_integrations_integrations_apache_error.targets
	forward_to = [loki.write.default.receiver]
}

local.file_match "logs_integrations_integrations_apache_access" {
	path_targets = [{
		__address__ = "localhost",
		__path__    = "/var/log/apache2/access.log",
		instance    = constants.hostname,
		job         = "integrations/apache_http",
	}]
}

loki.process "logs_integrations_integrations_apache_access" {
	forward_to = [loki.write.default.receiver]

	stage.regex {
		expression = "^(?P<ip>[^ ]*) [^ ]* (?P<user>[^ ]*) \\[(?P<timestamp>[^\\]]*)\\] \"(?P<method>\\S+)(?: +(?P<path>[^ ]*) +\\S*)?\" (?P<code>[^ ]*) (?P<size>[^ ]*)(?: \"(?P<referer>[^\\\"]*)\" \"(?P<agent>.*)\")?$"
	}

	stage.metrics {
		metric.histogram {
			name        = "response_http_codes"
			description = "Apache responses by HTTP codes"
			source      = "code"
			prefix      = "apache_"
			buckets     = [199, 299, 399, 499, 599]
		}
	}

	stage.static_labels {
		values = {
			job          = "apache_access",
			service_name = "apache",
			logtype = "access",
		}
	}

	stage.labels {
		values = {
			method = null,
		}
	}

}

loki.source.file "logs_integrations_integrations_apache_access" {
	targets    = local.file_match.logs_integrations_integrations_apache_access.targets
	forward_to = [loki.process.logs_integrations_integrations_apache_access.receiver]
}

//------------------ Apache end -----------------------------------

//------------------ Modsecurity logs -----------------------------------
loki.source.file "modsecurity_logs" {
	targets = [
		{__path__ = "/var/log/modsec/modsec_audit.log",
				job      = "modsec",
				app      = "fail2ban",
				env      = "env",
				instance = "lol"}, //dont touch this line!
	]
	forward_to = [loki.process.modsecurity_logs.receiver]
}

loki.process "modsecurity_logs" {
	forward_to = [loki.write.default.receiver]

	stage.static_labels {
		values = {
			job          = "modsec",
			service_name = "modsec",
		}
	}

	stage.tenant {
		value = "sysmid-sensitive"
	}

	stage.json {
		expressions = {
			request = "transaction",
		}
	}

	stage.json {
		expressions = {
			headers = "request",
		}
	}

	stage.json {
		expressions = {
			Host = "headers",
		}
	}

	stage.labels {
		values = {
			Host = null,
		}
	}
}
//------------------ Modsecurity logs end -----------------------------
//
//------------------ Fail2Ban logs -----------------------------------

loki.source.file "fail2ban" {
	targets = [
		{__path__ = "/var/log/fail2ban.log",
				job = "fail2ban"},
	]
	forward_to = [loki.process.fail2ban.receiver]
}

loki.process "fail2ban" {
	forward_to = [loki.write.default.receiver]

	stage.multiline {
		firstline     = "\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}"
		max_wait_time = "10s"
	}

	stage.regex {
		expression = "^(?s)(?P<time>\\S+? \\S+?) (fail2ban\\.)(?P<component>\\S+)\\s* \\[(?P<pid>\\S+)\\]: (?P<priority>\\S+)\\s* (?P<message>.*?)$"
	}

	stage.timestamp {
		source = "time"
		format = "2006-01-02 15:04:05,000"
	}

	stage.labels {
		values = {
			component = null,
			priority  = null,
		}
	}

	stage.output {
		source = "message"
	}

	stage.match {
		selector = "{job=\"fail2ban\"} |~ \"\\\\\\\\[\\\\\\\\S+\\\\\\\\] .*\""

		stage.regex {
			expression = "(\\[(?P<jail>\\S+)\\] )?(?P<message>.*?)$"
		}

		stage.labels {
			values = {
				jail = null,
			}
		}

		stage.output {
			source = "message"
		}
	}

	stage.regex {
		expression = ".*?(?P<remote_addr>\\d+\\.\\d+\\.\\d+\\.\\d+).*"
	}

	stage.geoip {
		db      = "/geoip/GeoLite2-City.mmdb"
		source  = "remote_addr"
		db_type = "city"
	}

	stage.labels {
		values = {
			geoip_city_name          = "",
			geoip_country_name       = "",
			geoip_country_code       = "",
			geoip_continent_name     = "",
			geoip_continent_code     = "",
			geoip_location_latitude  = "",
			geoip_location_longitude = "",
			geoip_postal_code        = "",
			geoip_timezone           = "",
			geoip_subdivision_name   = "",
			geoip_subdivision_code   = "",
		}
	}

	stage.label_drop {
		values = ["filename"]
	}

	stage.static_labels {
		values = {
			job          = "fail2ban",
			service_name = "fail2ban",
		}
	}
}
// ----------------- internal logs -----------------------------------
logging {
	level    = "debug"
	write_to = [loki.process.example.receiver]
}

loki.process "example" {
	forward_to = [loki.relabel.alloy_logs.receiver]

	stage.labels {
		values = {
			version = string.format("Hello%s", "1.0.0"),
		}
	}
}
// ----------------- internal logs end -----------------------------------

// ----------------- Alloy logs -----------------------------------
loki.relabel "alloy_logs" {
	rule {
		target_label = "instance"
		replacement  = string.format("version%s", "1.0.0")
	}

	rule {
		target_label = "job"
		replacement  = "integrations/self"
	}

	forward_to = [loki.write.default.receiver]
}

tracing {
	// Write all spans. Don't do this in production! prod zb 0.1
	sampling_fraction = 1.0

	// Forward internal spans to the local Tempo instance.
	write_to = [otelcol.exporter.otlp.tempo.input]
}

// ----------------- scraper -----------------------------------
// Collect metrics from the local running Alloy instance and forward to
// Prometheus.
prometheus.exporter.self "alloy" { }

prometheus.scrape "alloy" {
	targets    = prometheus.exporter.self.alloy.targets
	forward_to = [prometheus.remote_write.mimir.receiver]
}

// Collect profiles from the local running Alloy instance and forward to
// Pyroscope.
pyroscope.scrape "default" {
	targets = [
		{"__address__" = "localhost:12345", "service_name" = "alloy"},
	]
	forward_to = [pyroscope.write.pyroscope.receiver]
}

prometheus.scrape "mysqldexporter" {
	targets = [
		{"__address__" = "mysqldexporter:9104", "job" = "mysql"},
	]
	forward_to = [prometheus.remote_write.mimir.receiver]
}

prometheus.scrape "apacheexporter" {
	targets = [
		{"__address__" = "apacheexporter:9117", "job" = "apache"},
	]
	forward_to = [prometheus.remote_write.mimir.receiver]
}

prometheus.scrape "phpfpmexporter" {
	targets = [
		{"__address__" = "phpfpmexporter:9253", "job" = "phpfpm"},
	]
	forward_to      = [prometheus.remote_write.mimir.receiver]
	scrape_interval = "15s"
}

prometheus.scrape "php-fpm" {
  targets = [
    { "__address__" = "php-fpm-exporter:9253" }
  ]
  forward_to = [prometheus.remote_write.default.receiver]
  scrape_interval = "15s"
}
// ----------------- scraper end -----------------------------------

// ----------------- OpenTelemetry logs start -----------------------------------

otelcol.receiver.otlp "default" {
	grpc { }

	http { }

	output {
		logs   = [otelcol.processor.batch.default.input]
		traces = [otelcol.processor.batch.default.input]
	}
}

otelcol.processor.batch "default" {
	output {
		logs   = [otelcol.exporter.debug.default.input]
		traces = [otelcol.exporter.debug.default.input]
	}
}

otelcol.exporter.debug "default" {
	verbosity = "Detailed"
}

otelcol.exporter.otlp "tempo" {
	client {
		endpoint = coalesce(sys.env("TEMPO_HOST"), "localhost:4317")

		tls {
			insecure = true
		}
	}
}

// ----------------- OpenTelemetry logs end -----------------------------------

// ----------------- Writer  start -----------------------------------

prometheus.remote_write "mimir" {
	endpoint {
		url = string.format(
			"http://%s/api/v1/push",
			coalesce(sys.env("REMOTE_WRITE_HOST"), "localhost:9009"),
		)
	}
}

loki.write "default" {
	endpoint {
		url = string.format(
			"http://%s/loki/api/v1/push",
			coalesce(sys.env("LOKI_HOST"), "localhost:3100"),
		)
	}
}

pyroscope.write "pyroscope" {
	endpoint {
		url = string.format(
			"http://%s",
			coalesce(sys.env("PYROSCOPE_HOST"), "localhost:4040"),
		)
	}
}

// ----------------- Writer end -----------------------------------

//loki.process "laravel_logs" {
//  forward_to = [loki.relabel.laravel_logs.receiver]

//stage.labels {
//   values = {
//      service_name = "laravel"
//  }
// }
//}

//loki.relabel "laravel_logs" {
//rule {
//target_label = "service_name"
// replacement  = "laravel"
// }

//  rule {
//    target_label = "instance"
//    replacement  = "laravel"
//  }

//  rule {
//    target_label = "job"
//    replacement  = "app/laravel"
//  }
//
//  forward_to = [loki.write.default.receiver]
//}
